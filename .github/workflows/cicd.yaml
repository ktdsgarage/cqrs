name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      USERID:
        description: 'User ID for resource naming'
        required: true
        default: 'ondal'

env:
  USERID: ondal
  REGISTRY: ondalcr.azurecr.io
  IMAGE_ORG: telecom
  DB_NAMESPACE: ondal-database
  APP_NAMESPACE: ondal-application
  LOCATION: koreacentral
  RESOURCE_GROUP: tiu-dgga-rg
  IMAGE_TAG: v${{ github.run_number }}

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      storage_connection: ${{ steps.set-outputs.outputs.storage_connection }}
      plan_connection: ${{ steps.set-outputs.outputs.plan_connection }}
      usage_connection: ${{ steps.set-outputs.outputs.usage_connection }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.USERID }}-aks

      - name: Create Namespaces
        run: |
          kubectl create namespace ${{ env.DB_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace ${{ env.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup Azure Resources and Set Outputs
        id: set-outputs
        run: |
          # Storage Account
          az storage account create \
            --name ${{ env.USERID }}storage \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }} \
            --sku Standard_LRS \
            --only-show-errors || true
          
          # Get Storage connection string
          STORAGE_CONNECTION=$(az storage account show-connection-string \
            --name ${{ env.USERID }}storage \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query connectionString \
            --output tsv)
          
          # Create container
          az storage container create \
            --name ${{ env.USERID }}-eventhub-checkpoints \
            --connection-string "$STORAGE_CONNECTION" || true
          
          # Event Hubs setup
          az eventhubs namespace create \
            --name ${{ env.USERID }}-eventhub-plan-ns \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }} \
            --sku Basic || true
          
          az eventhubs namespace create \
            --name ${{ env.USERID }}-eventhub-usage-ns \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }} \
            --sku Basic || true
          
          az eventhubs eventhub create \
            --name phone-plan-events-plan \
            --namespace-name ${{ env.USERID }}-eventhub-plan-ns \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --partition-count 1 \
            --cleanup-policy Delete \
            --retention-time 24 || true
          
          az eventhubs eventhub create \
            --name phone-plan-events-usage \
            --namespace-name ${{ env.USERID }}-eventhub-usage-ns \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --partition-count 1 \
            --cleanup-policy Delete \
            --retention-time 24 || true
          
          # Get connection strings
          PLAN_CONNECTION=$(az eventhubs namespace authorization-rule keys list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --namespace-name ${{ env.USERID }}-eventhub-plan-ns \
            --name RootManageSharedAccessKey \
            --query primaryConnectionString -o tsv)
          
          USAGE_CONNECTION=$(az eventhubs namespace authorization-rule keys list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --namespace-name ${{ env.USERID }}-eventhub-usage-ns \
            --name RootManageSharedAccessKey \
            --query primaryConnectionString -o tsv)
          
          # Debug output
          echo "Storage connection string length: ${#STORAGE_CONNECTION}"
          echo "Plan connection string length: ${#PLAN_CONNECTION}"
          echo "Usage connection string length: ${#USAGE_CONNECTION}"
          
          # Set outputs using proper delimiter syntax
          {
            echo "storage_connection<<EOF"
            echo "$STORAGE_CONNECTION"
            echo "EOF"
            echo "plan_connection<<EOF"
            echo "$PLAN_CONNECTION"
            echo "EOF"
            echo "usage_connection<<EOF"
            echo "$USAGE_CONNECTION"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          # Verify outputs were set
          if [ -z "$STORAGE_CONNECTION" ] || [ -z "$PLAN_CONNECTION" ] || [ -z "$USAGE_CONNECTION" ]; then
            echo "Error: One or more connection strings are empty"
            exit 1
          fi

  build:
    needs: setup-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew command:clean command:build -x test
          ./gradlew query:clean query:build -x test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            command/build/libs/*.jar
            query/build/libs/*.jar

  docker-build-push:
    needs: [setup-infrastructure, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login -n ${{ env.USERID }}cr

      - name: Build and push Command Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile-command
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-command:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-command:latest

      - name: Build and push Query Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile-query
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-query:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-query:latest

  deploy:
    needs: [setup-infrastructure, docker-build-push]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.USERID }}-aks

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Create Application Secrets
        run: |
          # Debug output
          echo "Plan connection string available: ${{ needs.setup-infrastructure.outputs.plan_connection != '' }}"
          echo "Usage connection string available: ${{ needs.setup-infrastructure.outputs.usage_connection != '' }}"
          
          # Create Event Hub Secret with explicit values
          kubectl create secret generic eventhub-secret \
            --namespace ${{ env.APP_NAMESPACE }} \
            --from-literal=plan-connection-string="${{ needs.setup-infrastructure.outputs.plan_connection }}" \
            --from-literal=usage-connection-string="${{ needs.setup-infrastructure.outputs.usage_connection }}" \
            --from-literal=plan-hub-name="phone-plan-events-plan" \
            --from-literal=usage-hub-name="phone-plan-events-usage" \
            --from-literal=consumer-group='$Default' \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Verify secret creation
          echo "Verifying Event Hub secret..."
          kubectl get secret eventhub-secret -n ${{ env.APP_NAMESPACE }} -o yaml

      - name: Deploy Databases
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        run: |
          # Set environment variables for template
          export userid=${{ env.USERID }}
          export db_namespace=${{ env.DB_NAMESPACE }}
          export app_namespace=${{ env.APP_NAMESPACE }}
          export postgres_password_base64=$(echo -n "$POSTGRES_PASSWORD" | base64)
          export mongo_password_base64=$(echo -n "$MONGODB_PASSWORD" | base64)
          export resources_requests_cpu=250m
          export resources_requests_memory=512Mi
          export resources_limits_cpu=500m
          export resources_limits_memory=1024Mi
          
          # Generate and apply database manifest
          envsubst < deployment/databases.yaml.template > databases.yaml
          kubectl apply -f databases.yaml
          
          echo "Waiting for database pods to be ready..."
          kubectl wait --for=condition=ready pod -l "app=postgres,userid=${{ env.USERID }}" -n ${{ env.DB_NAMESPACE }} --timeout=300s || true
          kubectl wait --for=condition=ready pod -l "app=mongodb,userid=${{ env.USERID }}" -n ${{ env.DB_NAMESPACE }} --timeout=300s || true
          
          # Delete existing secret in app namespace if exists
          kubectl delete secret ${{ env.USERID }}-db-credentials -n ${{ env.APP_NAMESPACE }} --ignore-not-found
          
          # Copy DB credentials secret to app namespace
          kubectl get secret ${{ env.USERID }}-db-credentials -n ${{ env.DB_NAMESPACE }} -o yaml | \
          sed "s/namespace: .*/namespace: ${{ env.APP_NAMESPACE }}/" | \
          kubectl create -f -

      - name: Deploy Applications
        run: |
          # Verify Event Hub secrets
          SECRET_DATA=$(kubectl get secret eventhub-secret -n ${{ env.APP_NAMESPACE }} -o json)
          PLAN_LENGTH=$(echo $SECRET_DATA | jq -r '.data["plan-connection-string"]' | base64 -d | wc -c)
          USAGE_LENGTH=$(echo $SECRET_DATA | jq -r '.data["usage-connection-string"]' | base64 -d | wc -c)
          
          echo "Plan connection string length in secret: $PLAN_LENGTH"
          echo "Usage connection string length in secret: $USAGE_LENGTH"
          
          if [ "$PLAN_LENGTH" -lt 10 ] || [ "$USAGE_LENGTH" -lt 10 ]; then
            echo "Error: Event Hub connection strings in secret are too short or empty"
            exit 1
          fi
          
          # Set environment variables for template
          export userid=${{ env.USERID }}
          export db_namespace=${{ env.DB_NAMESPACE }}
          export app_namespace=${{ env.APP_NAMESPACE }}
          export command_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-command:${{ env.IMAGE_TAG }}
          export query_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/cqrs-query:${{ env.IMAGE_TAG }}
          export resources_requests_cpu=250m
          export resources_requests_memory=512Mi
          export resources_limits_cpu=500m
          export resources_limits_memory=1024Mi
          
          # Generate and apply application manifest
          envsubst < deployment/deploy.yaml.template > deploy.yaml
          kubectl apply -f deploy.yaml
          
          echo "Waiting for application pods to start..."
          sleep 30  # Give some time for pods to be created
          
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l "app=command-service,userid=${{ env.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=300s || true
          kubectl wait --for=condition=ready pod -l "app=query-service,userid=${{ env.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=300s || true

      - name: Verify Deployment and Show Logs
        run: |
          echo "Getting service endpoints..."
          COMMAND_IP=$(kubectl get svc ${{ env.USERID }}-cqrs-command -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          QUERY_IP=$(kubectl get svc ${{ env.USERID }}-cqrs-query -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Command Service IP: $COMMAND_IP"
          echo "Query Service IP: $QUERY_IP"
          
          echo "Showing recent logs from command service..."
          kubectl logs -l "app=command-service,userid=${{ env.USERID }}" -n ${{ env.APP_NAMESPACE }} --tail=100 || true
          
          echo "Showing recent logs from query service..."
          kubectl logs -l "app=query-service,userid=${{ env.USERID }}" -n ${{ env.APP_NAMESPACE }} --tail=100 || true
          
          # Basic health check
          if [ -n "$COMMAND_IP" ] && [ -n "$QUERY_IP" ]; then
            echo "Services are exposed successfully"
            exit 0
          else
            echo "Failed to expose services"
            exit 1
          fi